#!/bin/sh

# De-linting is a time-consuming process. The aim of LINTY is to support an
# iterative process to clear out lint. It uses a configuration file which lists
# packages that currently contain lint, and ensures that:
#
#  - packages listed in the configuration are removed once they are free of lint
#  - packages not listed in the configuration continue to be free of lint
#
# If either of the above statements is FALSE, LINTY prints out a warning and
# exits. If both statements are TRUE, LINTY prints out a table of lint counts
# for the packages that are listed in its configuration.
set -e
set -o pipefail

if [[ ! -z "$TOKEN" ]]; then
	GITHUB_TOKEN=$TOKEN
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
	echo "Set the GITHUB_TOKEN env variable."
	exit 1
fi

if [[ -z "$GITHUB_REPOSITORY" ]]; then
	echo "Set the GITHUB_REPOSITORY env variable."
	exit 1
fi

# Small hack to sanitize GOPATH
WORKDIR="/go/src/github.com/${GITHUB_REPOSITORY}"
# create go work dir
mkdir -p ${WORKDIR}
# copy all files from workspace to work dir
cp -R /github/workspace/* ${WORKDIR}
# cd into the work dir and run all commands from there
cd ${WORKDIR}

if [[ -f ".linty.conf" ]]; then
	echo "No linty conf file found"
	exit 1
fi

# Configuration file , Default set to .linty.conf
if [[ -z "$LINTY_CONFIG" ]]; then
	linty_config=$LINTY_CONFIG
	echo "Seting linty config to $LINTY_CONFIG"
fi

URI=https://api.github.com
API_VERSION=v3
API_HEADER="Accept: application/vnd.github.${API_VERSION}+json"
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"


linty(){
for pkg in `go list ./...`; do
	# Check package for lint
	lint=$(golint -set_exit_status ${pkg} 2>/dev/null)
	has_lint=$?

	echo "Path to linty_config $linty_config"

	# Check if the package is expected to have lint
	if grep -Fxq $pkg "$linty_config"; then
		if [ "$has_lint" -eq 1 ]; then
			# Still has lint...
			lint_count=$(echo "$lint" | wc -l)
			printf " %5s | %s\n" "$lint_count" "$pkg" >> "$tmp_file"
		else
			# Lint free!
			echo -n "WARNING: package $pkg contains NO lint, but is listed in the LINTY config.\n"
			echo -n "Please remove it from '$linty_config'!\n"
			rm $tmp_file
			exit 1
		fi
	else
		if [ "$has_lint" -eq 1 ]; then
			# New lint...
			echo -n "$lint\n"
			echo -n "\n"
			echo -n "ERROR: package $pkg contains NEW lint. Please address the issues listed above!\n"
			rm $tmp_file
			exit 2
		fi
	fi
done

# Sort results by count
sort -nr $tmp_file -o $tmp_file

# Print results table
echo -n "================================  L I N T Y   W A L L   O F   S H A M E  ================================\n"
echo -n "\n"
echo -n " Count | Name of Linty Package\n"
echo -n "-------+-------------------------------------------------------------------------------------------------\n"
while IFS= read -r var
	do
		echo -n "$var\n"
	done < "$tmp_file"
echo -n "\n"
echo -n "Help LINTY fight the good fight, golint today!\n"
}

main(){
	action=$(jq --raw-output .action "$GITHUB_EVENT_PATH")
	merged=$(jq --raw-output .pull_request.merged "$GITHUB_EVENT_PATH")
	ref=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
	REPO_OWNER=$(jq --raw-output .pull_request.head.repo.owner.login "$GITHUB_EVENT_PATH")
	REPO_NAME=$(jq --raw-output .pull_request.head.repo.name "$GITHUB_EVENT_PATH")
	default_branch=$(curl -XGET -sSL \
				-H "${AUTH_HEADER}" \
 				-H "${API_HEADER}" \
				"${URI}/repos/${REPO_OWNER}/${REPO_NAME}" | jq .default_branch
		)

# Temporary table file
tmp_file=$(touch /tmp/linty.${ref})

linty_out=$(linty $tmp_file)

# the real action!
curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
 -X POST -d '{"body": '"$linty_out"'}' \
 "${URI}/repos/${REPO_OWNER}/${REPO_NAME}/issues/${PR_NUMBER}/comments"


# Remove temporary file
rm $tmp_file
}

main "$@"
